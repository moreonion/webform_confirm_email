<?php

// FIXME
// test with email strings, not components (if that makes any sense)
// test multiple confirmations (ORed: one trigger needed to send all)
/*
 *
 * conditions could actually be infered from email config
 *
 */

include_once 'webform_confirm_email.admin.inc';

/**
 * Implements hook_webform_submission_delete().
 *
 * Respond to a Webform submission being deleted - if a submission
 * is deleted the hash for the confirmation URL can be deleted too
 *
 * @param $node
 *   The Webform node on which this submission was made.
 * @param $submission
 *   The Webform submission that was just deleted from the database.
 */
function webform_confirm_email_webform_submission_delete($node, $submission) {
  db_query(
    'delete from {webform_confirm_email_code} where nid = %d and sid = %d',
    $node->nid,
    $submission->sid
  );
  db_query(
    'delete from {webform_confirm_email_conditional} '.
      'where nid = %d and sid = %d',
    $node->nid,
    $submission->sid
  );
}

function webform_confirm_email_is_confirmation_request($nid, $eid) {

  $obj = db_fetch_object(
    db_query(
      'SELECT nid '.
         'FROM {webform_confirm_email} ' .
           'WHERE nid = %d ' .
           'AND   eid = %d ',
      (int) $nid,
      (int) $eid
    )
  );

  return is_object($obj);
}

/**
 * generate a hash for a new email submission, or get an existing hash
 *
 * @param $nid
 *   node id of the submitted form
 * @param $sid
 *   submission id of the submitted form
 * @param $email
 *   email address of the submitter; if empty, it's assumed that the submission
 *   has already happened and the webform_confirm_email_code table is searched
 *   for a hash
 */
function webform_confirm_email_generate_key($nid, $sid, $email = null) {
  if (isset($email)) {
    return hash_hmac(
      'md5', serialize(array($nid, $sid, $email)), drupal_get_private_key()
    );
  }
  else {
    return db_result(
      db_query(
        'SELECT code ' .
          'FROM {webform_confirm_email_code} ' .
            'WHERE nid = %d ' .
            'AND   sid = %d ',
        $nid,
        $sid
      )
    );
  }
}

/**
 * Implementation of hook_mail_alter().
 * When drupal sends an email this function checks whether there is an entry
 * in the webform_confirm_email table that identifies the email as being a
 * conditional or confirmational mail.
 * If it's a confirmational mail a hash code is generated, an URL is generated
 * out of the hash and the "%confirm_url" is replaced in the email by this generated
 * confirmation URL.
 * If it's a conditional email, the email is stopped from being send; This is because
 * after a webform submission the webform module would send all emails that are
 * registered for this form; but we want the conditional email to be send only when
 * the user uses the confirmation link that is send to him/her in the confirmation email.
 *
 * @param $message
 */
function webform_confirm_email_mail_alter(&$message) {
  if (webform_confirm_email_is_confirmation_request($message['params']['email']['nid'], $message['params']['email']['eid']) == TRUE) {
    $eid = (int) $message['params']['email']['eid'];
    $nid = (int) $message['params']['email']['nid'];
    $sid = (int) ($message['params']['submission']->sid);
    $obj = array(
      'nid' => $nid,
      'sid' => $sid,
    );

    $obj['datetime'] = time();
    $obj['email']    = $message['to'];
    $code            = webform_confirm_email_generate_key($nid, $sid, $obj['email']);
    $obj['eid']      = $eid;
    $obj['code']     = $code;
    $confirm_url     = url(
      "node/$nid/confirm_email/$sid/$code",
      array('absolute' => true, 'external' => false)
    );
    // replace %confirm_url with proper URL
    // may have to rewrap the mail, not sure yet
    foreach ($message['body'] as $i => $b) {
      $message['body'][$i] = str_replace('%confirm_url', $confirm_url, $b);
    }
    $result = db_result(
      db_query(
        'SELECT count(*) ' .
          'FROM {webform_confirm_email_code} '.
            'WHERE nid = %d ' .
            'AND   sid = %d ',
        $nid,
        $sid
      )
    );
    if ($result) {
      drupal_write_record(
        'webform_confirm_email_code', $obj, array('nid', 'sid')
      );
    }
    else {
      drupal_write_record('webform_confirm_email_code', $obj);
    }
  }
}

/**
 * Form submit callback function of the confirmation form
 * the user gets presented when he/she clicks on the confirmation URL
 * that was sent to him/her with the confirmation email.
 * It's main purpose is to send off the conditional email that was stopped
 * in the webform_confirm_email_mail_alter function.
 */
function _webform_confirm_email_confirmed_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'node';// somewhere else.....
  $nid = (int) $form['nid']['#value'];
  $sid = (int) $form['sid']['#value'];

  db_query(
    'delete from {webform_confirm_email_code} '.
      'where nid = %d and sid = %d',
    $nid,
    $sid
  );

  $query = 'select ecid, message from {webform_confirm_email_conditional} '.
    'where nid = %d and sid = %d';

  while ($obj = db_fetch_object(db_query($query, $nid, $sid))) {
    $message = unserialize($obj->message);
    // Concatenate and wrap the e-mail body.
    if (is_array($message['body'])) {
      $message['body'] = implode("\n\n", $message['body']);
    }
    $message['body'] = drupal_wrap_mail($message['body']);
    $message['result'] = drupal_mail_send($message);
    if ($message['result']) {
      db_query(
        'delete from {webform_confirm_email_conditional} '.
        'where ecid = %d',
        $obj->ecid
      );
    } else {
      watchdog(
        'mail',
        'Error sending e-mail (from %from to %to).',
        array('%from' => $message['from'], '%to' => $message['to']),
        WATCHDOG_ERROR
      );
      drupal_set_message(
        t(
          'Unable to send e-mail. Please contact the site administrator '.
            'if the problem persists.'
        ),
        'error'
      );
    }
  }
}

/**
 * This function builds the confirmation form that a user reaches
 * when he/she followes the link provided in the confirmation email.
 * The submit callback function, that is set here, will later take
 * care of sending the conditional email.
 */
function webform_confirm_email_response_form($form_state, $nid, $sid, $code) {
  if (empty($code)) {
    return array('ha' => array(
      '#type' => 'markup',
      '#value' => 'Missing code, what are you trying to pull!?'
    ));
  }

  if (webform_confirm_email_generate_key($nid->nid, $sid->sid) !== $code) {
    return array('ha' => array(
      '#type' => 'markup',
      '#value' => t('Invalid code.')
    ));
  }

  $form = array(
    'nid' => array('#type' => 'value', '#value' => $nid->nid),
    'sid' => array('#type' => 'value', '#value' => $sid->sid),
    '#submit' => array('_webform_confirm_email_confirmed_form_submit')
  );

  $question = t('Confirm your email address?');
  $description = t(
    'You are here to confirm your email address to complete a form submission '.
      'process. You can ackowledge this was you, click no to report the abuse'.
      'of your email address or ignore this form knowing no email messages '.
      'were sent from our site in your name.'
  );
  $report_abuse_url = 'node/' . $nid->nid . '/report_abuse/' . $sid->sid . "/$code";
  return confirm_form(
    $form, $question, $report_abuse_url, $description,
    t('Yes, that was me.'),
    t('No, someone is using my email address without my knowledge.')
  );
}

/**
 * Implementation of hook_menu().
 * The callback function is registered here to handle all page requests
 * with confirmation hash codes in the URL
 */
function webform_confirm_email_menu() {
  return array(
    'node/%webform_menu/confirm_email/%webform_menu_submission/%' => array(
      'title'           => t('Submit email confirmation'),
      'load arguments'  => array(1),
      'page callback'   => 'drupal_get_form',
      'page arguments'  => array('webform_confirm_email_response_form', 1, 3, 4),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    ),
    'node/%webform_menu/webform/confirmation_request/%webform_menu_email' => array(
      'title'            => t('Edit confirmation request e-mail settings'),
      'load arguments'   => array(1),
      'page callback'    => 'webform_confirm_email_confirmation_request_email_edit',
      'page arguments'   => array(1, 4),
      'access callback'  => 'node_access',
      'access arguments' => array('update', 1),
      'type' => MENU_CALLBACK,
    ),
    'node/%webform_menu/webform/confirmation_request/%webform_menu_email/delete' => array(
      'title'            => t('Delete a confirmation request e-mail'),
      'load arguments'   => array(1),
      'page callback'    => 'webform_confirm_email_confirmation_request_email_delete',
      'page arguments'   => array(1, 4),
      'access callback'  => 'node_access',
      'access arguments' => array('update', 1),
      'type' => MENU_CALLBACK,
    ),
    'node/%webform_menu/webform/confirmation/%webform_confirmation_email' => array(
      'title'            => t('Edit confirmation e-mail settings'),
      'load arguments'   => array(1),
      'page callback'    => 'webform_confirm_email_confirmation_email_edit',
      'page arguments'   => array(1, 4),
      'access callback'  => 'node_access',
      'access arguments' => array('update', 1),
      'type' => MENU_CALLBACK,
    ),
    'node/%webform_menu/webform/confirmation/%webform_confirmation_email/delete' => array(
      'title'            => t('Delete a confirmation request e-mail'),
      'load arguments'   => array(1),
      'page callback'    => 'webform_confirm_email_confirmation_email_delete',
      'page arguments'   => array(1, 4),
      'access callback'  => 'node_access',
      'access arguments' => array('update', 1),
      'type' => MENU_CALLBACK,
    ),
    //FIXME
    //We're not doing anything helpful with this right now.
    'node/%webform_menu/report_abuse/%webform_menu_submission/%' => array(
      'title'           => t('Report abuse regarding email confirmation'),
      'load arguments'  => array(1),
      'page callback'   => 'webform_confirm_email_report_abuse',
      'page arguments'  => array(1, 3, 4),
      'access callback' => TRUE,
      'type' => MENU_CALLBACK,
    )
  );
}

/**
 * Report abuse callback function, currently not implemented
 */
function webform_confirm_email_report_abuse() {
  return t('Sorry, not implemented yet. Try <a href="/contact">contact</a>.');
  //FIXME
}
